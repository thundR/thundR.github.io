<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>symbols under the dresser</title>
    <description>Writeups and notes on security and other content
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 27 Apr 2018 01:38:40 -0700</pubDate>
    <lastBuildDate>Fri, 27 Apr 2018 01:38:40 -0700</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>Configuring Jenkins with GitHub, Gradle, and Nginx</title>
        <description>&lt;p&gt;I’ve been wanting to set up a build server for future projects for some time, and decided recently to bite the bullet and try it out, now that my first Minecraft project is at an appropriate point in development. This can serve as a guide for anyone wanting to setup a ForgeGradle project in Jenkins, but most of the content will apply to a broad set of circumstances.&lt;/p&gt;

&lt;h2 id=&quot;part-1-jenkins-install&quot;&gt;Part 1: Jenkins Install&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;I have access to a VPS that I thought was appropriate for the task, but as I would come to find out, it had some particular features that were going to become a problem, specifically that it was running a dated Ubuntu 14 LTS. This meant that there was no native support for Java 8, which is a requirement for Jenkins.&lt;/p&gt;

&lt;p&gt;This meant that I needed to find a way to install Java 8 on Ubuntu 14, which boiled down to adding the WebUpd8 team repo and downloading an install script for Java 8:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-add-repository ppa:webupd8team/java
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install oracle-java8-installer&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once that was squared away, I moved to getting Jenkins installed on the system. Originally I was going to run from docker, but docker required a version of the Linux kernel that would require me to edit grub records to boot from, and I didn’t want to down the entire VPS. Instead, I installed it bare metal and determined that I would have a reverse proxy in front of it. To install, I ran:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - https://jenkins-ci.org/debian/jenkins-ci.org.key | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add –
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'echo deb http://pkg.jenkins-ci.org/debian binary/ &amp;gt; /etc/apt/sources.list.d/jenkins.list'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install Jenkins&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This was enough to get Jenkins running on the default port of 8080. Now we move to the setup of the reverse proxy through Nginx&lt;/p&gt;

&lt;h2 id=&quot;part-2-nginx&quot;&gt;Part 2: Nginx&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;Nginx was arguably the most frustrating part of this setup process, and exposed some of the shortcomings of the dpkg system that I was not aware of, as I don’t primarily use Ubuntu/Debian. Originally I just installed Nginx through the official Ubuntu repos, but after trying to get my config file to work, I realized that the version they offer is very very far out of date. What followed was a series of &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get remove --purge&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo dpkg -S&lt;/code&gt; trying to get the old version to let go of the system and allow for the install of the latest stable from nginx’s repo. Additionally, I had deleted the .conf file, assuming that removing and reinstalling the package would regenerate it. It did not, and indeed does not regenerate any owned config dirs or files of a package. This is good to remember. Eventually I ran &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo find / | grep nginx | sudo xargs rm -rf
&lt;/code&gt; out of frustration and this finally allowed me to cleanly install nginx from their own repo.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository ppa:nginx/stable
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get install nginx&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then we moved to getting Nginx actually configured.&lt;/p&gt;

&lt;p&gt;First, I wanted certs for my proxy, as no one should be running HTTP in this day and age. Let’s Encrypt has certbot, a tool I’ve been meaning to learn for some time. Eventually I came to the conclusion that it was much simpler to run certbot in &lt;code class=&quot;highlighter-rouge&quot;&gt;--standalone&lt;/code&gt; than the nginx mode, as it didn’t mess with any config files for nginx. I used &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo certbot --standalone certonly&lt;/code&gt;, making sure to &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo service nginx stop&lt;/code&gt; beforehand, so certbot could use port 80. This installed my certs in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/letsencrypt/live/*domain*/&lt;/code&gt; and allowed me to point to them in my nginx config file. Make sure to specify the subdomain you want to use during the certbot setup. Additionally, you can get a wildcard cert, but I don’t plan on running enough services to warrant one.&lt;/p&gt;

&lt;p&gt;Next, we are planning on setting this up on a subdomain, so I added a subdomain A record to my domain, how to do this will depend on your registrar.&lt;/p&gt;

&lt;p&gt;We can remove any sites in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/sites-enabled&lt;/code&gt; since we will be writing our own .conf file for this. In &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/conf.d/jenkins.conf&lt;/code&gt;, I ended up with this file, which will redirect HTTP requests to something a bit more secure:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your.domain.here&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;301&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$host$request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;your.domain.here&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;ssl_certificate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/etc/letsencrypt/live/ci.thundr.pw/fullchain.pem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;ssl_certificate_key&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/etc/letsencrypt/live/ci.thundr.pw/privkey.pem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;ssl&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;ssl_session_cache&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;builtin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;shared:SSL:10m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;ssl_protocols&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;TLSv1&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TLSv1.1&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TLSv1.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;ssl_ciphers&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;ssl_prefer_server_ciphers&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt;        &lt;span class=&quot;s&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$server_port&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt;        &lt;span class=&quot;s&quot;&gt;X-Real-IP&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt;        &lt;span class=&quot;s&quot;&gt;X-Forwarded-For&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt;        &lt;span class=&quot;s&quot;&gt;X-Forwarded-Proto&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$scheme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_redirect&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://localhost:8080&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://your.domain.here&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_pass&lt;/span&gt;              &lt;span class=&quot;s&quot;&gt;http://localhost:8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Required for new HTTP-based CLI
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;proxy_http_version&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_request_buffering&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;proxy_buffering&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Required for HTTP-based CLI to work over SSL
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# workaround for https://issues.jenkins-ci.org/browse/JENKINS-45651
&lt;/span&gt;    &lt;span class=&quot;kn&quot;&gt;add_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'X-SSH-Endpoint'&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'jenkins.domain.tld:50022'&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This allows Jenkins to be served over HTTPS! Now, for configuring Jenkins.&lt;/p&gt;

&lt;h2 id=&quot;part-3-jenkins-setup&quot;&gt;Part 3: Jenkins Setup&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;This will contain specifics for ForgeGradle.&lt;/p&gt;

&lt;p&gt;This section was a bit more straightforward , but still took a decent amount of trial, error, and troubleshooting. First, we can setup all the basics of the project after creating a new project with the default settings. Go to configure, and set the name and the GitHub repo in the SCM section. This is all very straightforward, so I will skip to the unclear parts.&lt;/p&gt;

&lt;p&gt;We need to setup build webhooks for Jenkins so it can build on GitHub push. To do that, we can use the GitHub plugin that comes with Jenkins. First, a checkbox:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/1.png&quot; alt=&quot;GitHub Build Trigger&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, we can go on GitHub and setup a webhook for our repo under Settings pointing to &lt;code class=&quot;highlighter-rouge&quot;&gt;our.domain/github_webhook&lt;/code&gt; that will send a POST whenever we push new code to master. With this set up, we need to specify the gradle commands to run.&lt;/p&gt;

&lt;p&gt;Under the Build section of the configuration for your job, go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Add build step/Invoke gradle script&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2.png&quot; alt=&quot;Gradle Arguments&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I also added another build step that comes before invoke gradle script that runs &lt;code class=&quot;highlighter-rouge&quot;&gt;rm -rm build/libs&lt;/code&gt; as an Execute shell. This just cleans out the libs folder so jars don’t pile up every build.&lt;/p&gt;

&lt;p&gt;Additionally, you’re going to want to tell Jenkins where your jars are going to come out under &lt;code class=&quot;highlighter-rouge&quot;&gt;Post-Build actions/Archive the artifacts&lt;/code&gt;, so it can host them as build artifacts:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/4.png&quot; alt=&quot;Gradle Arguments&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is it! At this point, the build was working for me, and my artifacts were even being versioned off build number, with this in my build.gradle:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD_NUMBER&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;build_number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getenv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BUILD_NUMBER&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//version= 1.12-1.0.0-143-universal.jar&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//or in dev= 1.12-1.0.0-dev-universal.jar&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;${project.config.mc_version}-${project.config.mod_version}-${build_number}&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;This was a fun project that got my toes wet in build automation and reverse proxying. I probably missed a lot of incredibly crucial details, but I won’t know until something breaks.&lt;/p&gt;
</description>
        <pubDate>Thu, 26 Apr 2018 18:00:00 -0700</pubDate>
        <link>http://localhost:4000/2018/04/26/configuring-jenkins.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/26/configuring-jenkins.html</guid>
        
        <category>featured</category>
        
        
      </item>
    
      <item>
        <title>NCL Part 1 - Log Parsing</title>
        <description>&lt;p&gt;NCL is an online CTF competition that I’ve participated in a couple times. This time around, I thought documenting some of my findings would be helpful, since I find myself looking up the same material over and over. This is going to be pretty scattershot in terms of subjects.&lt;/p&gt;

&lt;h2 id=&quot;log-parsing&quot;&gt;Log Parsing&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Most of the time, there is a section asking for some grep/sed/awk gymnastics, and I always end up with long spaghetti strings of pipes and redirects.&lt;/p&gt;

&lt;h4 id=&quot;task-1-fail2banlog&quot;&gt;Task 1: fail2ban.log&lt;/h4&gt;
&lt;hr /&gt;

&lt;p&gt;We are given a long and somewhat frightening &lt;a href=&quot;http://localhost:4000/assets/fail2ban.log&quot;&gt;fail2ban log&lt;/a&gt;  of critical failures and errors, and asked to parse it for information. I’ll only be covering the non-trivial questions asked.&lt;/p&gt;

&lt;h5 id=&quot;1-find-the-number-of-unique-ips-banned&quot;&gt;1. Find the number of unique IPs banned.&lt;/h5&gt;
&lt;hr /&gt;
&lt;p&gt;Fail2ban shows a Ban event in the log with a string like this:
&lt;code class=&quot;highlighter-rouge&quot;&gt;2016-11-28 01:10:19,438 fail2ban.actions: WARNING [ssh] Ban 195.223.55.28&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For this task, we need to be able to do a couple of things. First, we need to be able to take output and remove duplicates, since the log contains many duplicate Ban events. We also need to be able to remove output before the matching string, since including this output would make unique sorting impossible, as the date changes with every Ban. I’ll give the command string I used and break it up into parts:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat fail2ban.log | grep -E -o &quot;Ban.{0,20}&quot; | sort -u | wc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grep -E -o &quot;Ban.{0,20}&lt;/code&gt; allows for the &lt;code class=&quot;highlighter-rouge&quot;&gt;Ban&lt;/code&gt; string to be matched, and only shows output 20 characters to the right. This allows for the IP address to be part of the output, while removing the date string. &lt;code class=&quot;highlighter-rouge&quot;&gt;sort -u&lt;/code&gt; takes only the unique strings passed to it, and &lt;code class=&quot;highlighter-rouge&quot;&gt;wc&lt;/code&gt; counts up the total lines. This gave us an answer of &lt;code class=&quot;highlighter-rouge&quot;&gt;8&lt;/code&gt; unique IPs banned.&lt;/p&gt;

&lt;h5 id=&quot;2-finding-which-ip-was-banned-the-most&quot;&gt;2. Finding which IP was banned the most.&lt;/h5&gt;
&lt;hr /&gt;

&lt;p&gt;We don’t really need to go crazy on this one, since there are only a handful of banned IPs, and counting them manually is easy. If we wanted to scale this up, maybe with a log file of hundreds of thousands of entries, we would need to bring in a new set of commands to our string.&lt;/p&gt;

&lt;p&gt;To start, we need to be able to pipe the output of our nicely sorted list of IPs back into grep to find occurances. This could be done easily with a bash script, but I wanted to see how far I could push a oneliner. To start, we need &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs -i&lt;/code&gt; for command output redirection. &lt;code class=&quot;highlighter-rouge&quot;&gt;-i&lt;/code&gt; lets us insert the output of our last command into a new command as an argument variable, like so:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat fail2ban.log | grep -E -o &quot;Ban.{0,20}&quot; | sort -u | xargs -iarg grep -c arg fail2ban.log&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This gives us a nicely formatted list of the banned ips, but without their corresponding address strings:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;While this is the information we need, in a large file this can be unhelpful, since we need the corresponding address next to the number of times banned to be able to relate the data. I tried to push a oneliner to do this, but it became apparent that if I were to do this in one line, it would be a mess of formatting and garbage. The cleanest I could barely call one line came out to something like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var=$(cat fail2ban.log | grep -E -o &quot;Ban.{0,20}&quot; | sort -u) &amp;amp;&amp;amp; echo $var | xargs -iarg grep -c arg fail2ban.log &amp;amp;&amp;amp; echo $var&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This gives us:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ban&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;108.58&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;9.206&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ban&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;116.31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;116.47&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ban&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;12.70&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;197.135&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ban&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;195.223&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;55.28&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ban&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;47.202&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;16.90&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ban&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;91.224&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;160.106&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ban&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;91.224&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;160.108&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Ban&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;92.252&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;94.69&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Which is close enough. To do this properly, you could just output each into a file and have a simple script read each with something like &lt;code class=&quot;highlighter-rouge&quot;&gt;line1_file1 + &quot; &quot; + line1_file2&lt;/code&gt; and so on.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;These tasks were actually easier than the last competition I took part in, but I still learned a few new tricks, like &lt;code class=&quot;highlighter-rouge&quot;&gt;xargs -i&lt;/code&gt;. Overall, pretty fun :)&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Apr 2018 07:00:00 -0700</pubDate>
        <link>http://localhost:4000/2018/04/11/ncl-part-1.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/04/11/ncl-part-1.html</guid>
        
        <category>featured</category>
        
        
      </item>
    
  </channel>
</rss>
